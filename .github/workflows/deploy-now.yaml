name: Deploy Now

on:
  - push
  - workflow_dispatch

jobs:
  deploy-now:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch project data
        uses: ionos-deploy-now/retrieve-project-info-action@v1
        id: project
        with:
          api-key: ${{ secrets.IONOS_API_KEY }}
          project: ${{ secrets.IONOS_PROJECT_ID }}
          service-host: api-eu.ionos.space
      - name: checkout
        if: ${{ steps.project.outputs.deployment-enabled == 'true' }}
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Make envfile
        if: ${{ steps.project.outputs.deployment-enabled == 'true' }}
        uses: fmunirdev/envvar-to-dotenv-action@v0.2.0
        with:
          target: .env.local
          variableNames: APP_ENV,APP_SECRET,APP_DEBUG,DATABASE_URL,STRAVA_SECRET,STRAVA_ID,KOMOOT_SECRET,KOMOOT_ID,MAILER_DSN,MAILER_FROM
        env:
          APP_DEBUG: 0
          APP_ENV: prod
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          KOMOOT_ID: ${{ secrets.KOMOOT_ID }}
          KOMOOT_SECRET: ${{ secrets.KOMOOT_SECRET }}
          MAILER_DSN: ${{ secrets.MAILER_DSN }}
          MAILER_FROM: ${{ secrets.MAILER_FROM }}
          STRAVA_ID: ${{ secrets.STRAVA_ID }}
          STRAVA_SECRET: ${{ secrets.STRAVA_SECRET }}
      - name: Setup composer
        if: ${{ steps.project.outputs.deployment-enabled == 'true' }}
        uses: php-actions/composer@v6
        with:
          args: --no-dev --optimize-autoloader
      - name: Optimise composer
        if: ${{ steps.project.outputs.deployment-enabled == 'true' }}
        uses: php-actions/composer@v6
        with:
          args: --optimize --no-dev --classmap-authoritative
          command: dump-autoload
      - name: Build assets and run tests
        if: ${{ steps.project.outputs.deployment-enabled == 'true' }}
        run: php .deploy-now/create-app-secret;
      - name: Deploy build
        if: ${{ steps.project.outputs.deployment-enabled == 'true' }}
        uses: ionos-deploy-now/deploy-to-ionos-action@v1
        with:
          api-key: ${{ secrets.IONOS_API_KEY }}
          bootstrap-deploy: ${{ steps.project.outputs.bootstrap-deploy }}
          branch-id: ${{ steps.project.outputs.branch-id }}
          dist-folder: ./
          project: ${{ secrets.IONOS_PROJECT_ID }}
          remote-host: ${{ steps.project.outputs.remote-host }}
          service-host: api-eu.ionos.space
          storage-quota: ${{ steps.project.outputs.storage-quota }}
      - name: Setup Cron
        run: /usr/bin/crontab ./crontab.txt
      - name: Run Cron
        run: su-exec root crond -f -l 8
